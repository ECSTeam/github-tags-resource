// This file was generated by counterfeiter
package fakes

import (
	"net/url"
	"sync"

	"github.com/ecsteam/github-tags-resource"
	"github.com/google/go-github/github"
)

type FakeGitHub struct {
	ListTagsStub        func() ([]*github.RepositoryTag, error)
	listTagsMutex       sync.RWMutex
	listTagsArgsForCall []struct{}
	listTagsReturns     struct {
		result1 []*github.RepositoryTag
		result2 error
	}

	GetTagStub        func(id string) (*github.RepositoryTag, error)
	getTagMutex       sync.RWMutex
	getTagArgsForCall []struct {
		id string
	}
	getTagReturns struct {
		result1 *github.RepositoryTag
		result2 error
	}

	GetTarballLinkStub        func(tag string) (*url.URL, error)
	getTarballLinkMutex       sync.RWMutex
	getTarballLinkArgsForCall []struct {
		tag string
	}
	getTarballLinkReturns struct {
		result1 *url.URL
		result2 error
	}
	GetZipballLinkStub        func(tag string) (*url.URL, error)
	getZipballLinkMutex       sync.RWMutex
	getZipballLinkArgsForCall []struct {
		tag string
	}
	getZipballLinkReturns struct {
		result1 *url.URL
		result2 error
	}
}

func (fake *FakeGitHub) ListTags() ([]*github.RepositoryTag, error) {
	fake.listTagsMutex.Lock()
	fake.listTagsArgsForCall = append(fake.listTagsArgsForCall, struct{}{})
	fake.listTagsMutex.Unlock()
	if fake.ListTagsStub != nil {
		return fake.ListTagsStub()
	} else {
		return fake.listTagsReturns.result1, fake.listTagsReturns.result2
	}
}

func (fake *FakeGitHub) ListTagsCallCount() int {
	fake.listTagsMutex.RLock()
	defer fake.listTagsMutex.RUnlock()
	return len(fake.listTagsArgsForCall)
}

func (fake *FakeGitHub) ListTagsReturns(result1 []*github.RepositoryTag, result2 error) {
	fake.ListTagsStub = nil
	fake.listTagsReturns = struct {
		result1 []*github.RepositoryTag
		result2 error
	}{result1, result2}
}

func (fake *FakeGitHub) GetTag(id string) (*github.RepositoryTag, error) {
	fake.getTagMutex.Lock()
	fake.getTagArgsForCall = append(fake.getTagArgsForCall, struct {
		id string
	}{id})
	fake.getTagMutex.Unlock()
	if fake.GetTagStub != nil {
		return fake.GetTagStub(id)
	} else {
		return fake.getTagReturns.result1, fake.getTagReturns.result2
	}
}

func (fake *FakeGitHub) GetTagCallCount() int {
	fake.getTagMutex.RLock()
	defer fake.getTagMutex.RUnlock()
	return len(fake.getTagArgsForCall)
}

func (fake *FakeGitHub) GetTagArgsForCall(i int) string {
	fake.getTagMutex.RLock()
	defer fake.getTagMutex.RUnlock()
	return fake.getTagArgsForCall[i].id
}

func (fake *FakeGitHub) GetTagReturns(result1 *github.RepositoryTag, result2 error) {
	fake.GetTagStub = nil
	fake.getTagReturns = struct {
		result1 *github.RepositoryTag
		result2 error
	}{result1, result2}
}

func (fake *FakeGitHub) GetTarballLink(tag string) (*url.URL, error) {
	fake.getTarballLinkMutex.Lock()
	fake.getTarballLinkArgsForCall = append(fake.getTarballLinkArgsForCall, struct {
		tag string
	}{tag})
	fake.getTarballLinkMutex.Unlock()
	if fake.GetTarballLinkStub != nil {
		return fake.GetTarballLinkStub(tag)
	} else {
		return fake.getTarballLinkReturns.result1, fake.getTarballLinkReturns.result2
	}
}

func (fake *FakeGitHub) GetTarballLinkCallCount() int {
	fake.getTarballLinkMutex.RLock()
	defer fake.getTarballLinkMutex.RUnlock()
	return len(fake.getTarballLinkArgsForCall)
}

func (fake *FakeGitHub) GetTarballLinkArgsForCall(i int) string {
	fake.getTarballLinkMutex.RLock()
	defer fake.getTarballLinkMutex.RUnlock()
	return fake.getTarballLinkArgsForCall[i].tag
}

func (fake *FakeGitHub) GetTarballLinkReturns(result1 *url.URL, result2 error) {
	fake.GetTarballLinkStub = nil
	fake.getTarballLinkReturns = struct {
		result1 *url.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeGitHub) GetZipballLink(tag string) (*url.URL, error) {
	fake.getZipballLinkMutex.Lock()
	fake.getZipballLinkArgsForCall = append(fake.getZipballLinkArgsForCall, struct {
		tag string
	}{tag})
	fake.getZipballLinkMutex.Unlock()
	if fake.GetZipballLinkStub != nil {
		return fake.GetZipballLinkStub(tag)
	} else {
		return fake.getZipballLinkReturns.result1, fake.getZipballLinkReturns.result2
	}
}

func (fake *FakeGitHub) GetZipballLinkCallCount() int {
	fake.getZipballLinkMutex.RLock()
	defer fake.getZipballLinkMutex.RUnlock()
	return len(fake.getZipballLinkArgsForCall)
}

func (fake *FakeGitHub) GetZipballLinkArgsForCall(i int) string {
	fake.getZipballLinkMutex.RLock()
	defer fake.getZipballLinkMutex.RUnlock()
	return fake.getZipballLinkArgsForCall[i].tag
}

func (fake *FakeGitHub) GetZipballLinkReturns(result1 *url.URL, result2 error) {
	fake.GetZipballLinkStub = nil
	fake.getZipballLinkReturns = struct {
		result1 *url.URL
		result2 error
	}{result1, result2}
}

var _ resource.GitHub = new(FakeGitHub)
